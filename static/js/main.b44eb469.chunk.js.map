{"version":3,"sources":["app/components/Themes/Themes.js","app/components/App/AppBackground.js","app/utilities/utilities.js","app/components/Resume/Body/Contact.js","app/components/Resume/Body/Education.js","app/components/Resume/Body/ExperienceCard.js","app/components/Resume/Body/Experience.js","app/components/Resume/Body/Profile.js","app/components/Resume/Body/Skillsets.js","app/components/Resume/Body/Body.js","app/components/Resume/Header/Bio.js","app/components/Resume/Header/Headline.js","app/components/Resume/Body/ProgressRing.js","app/components/Resume/Header/Headshot.js","app/components/Resume/Header/Header.js","app/components/Resume/Resume.js","app/components/Layout/Layout.js","app/components/App/AppLayout.js","app/components/App/App.js","app/components/Themes/ThemeWrapper.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","Default","className","themeName","themeBase","Redacted","Operator","AppBackground","activeTheme","useContext","src","alt","preload","autoPlay","loop","muted","type","generateNewKey","val","Date","getTime","renderRedactedContent","redactedContent","redaction","RegExp","redactions","split","redactWord","word","i","match","key","map","Contact","props","utilities","title","email","linkedin","github","contact","Education","school","location","degree","graduationYear","education","ExperienceCard","experience","position","organization","startDate","endDate","role","achievements","achievement","Experience","employmentHistory","Profile","content","profile","Skillsets","Object","entries","primary","primarySkill","skillType","skillList","reduce","acc","push","pop","redactedSkillList","join","secondary","secondarySkill","skills","Body","resume","profile--redacted","contact--redacted","education--redacted","skills--redacted","experience--redacted","Bio","fullName","bio","first","last","suffix","redactedFullName","profession","Headline","ProgressRing","height","width","fill","stroke","strokeWidth","targetProgress","headshot","radius","circumference","Math","PI","cx","cy","setProgress","progress","strokeDashoffset","attributeName","attributeType","from","to","dur","repeatCount","strokeDasharray","style","r","Headshot","console","log","Header","omitHeadshotAndHeadline","bio--redacted","includeHeadshotOnly","includeHeadshotAndHeadline","Resume","useState","data","setData","isLoading","setIsLoading","isError","setIsError","delayedUI","setDelayedUI","a","axios","get","response","useEffect","useEffectAborted","timeout","setTimeout","fetchData","clearTimeout","Layout","AppLayout","App","ThemeSelector","allThemes","keys","length","registeredTheme","applyDefaultTheme","setActiveTheme","handleThemeChange","e","newTheme","selectedName","selectedTheme","replace","applyNewTheme","target","value","Provider","theme","checked","onChange","children","Boolean","window","hostname","store","createStore","propTypes","PropTypes","object","isRequired","render","ThemeWrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b44eb469.chunk.js","sourcesContent":["import React from 'react';\n\n// TODO: Add color scheme.\nconst Themes = {\n  Default: {\n    className: \"t--default\",\n    themeName: \"Default\",\n    themeBase: \"transparent\"\n  },\n  // \"Default+\": {\n  //   className: \"t--default-plus\",\n  //   themeName: \"Default+\",\n  //   themeBase: \"transparent\"\n  // },\n  // \"Jurassic Park\": {\n  //   className: \"t--jurassic-park\",\n  //   themeName: \"Jurassic Park\",\n  //   themeBase: \"black\"\n  // },\n  // \"Night Vision\": {\n  //   className: \"t--night-vision\",\n  //   themeName: \"Night Vision\",\n  //   themeBase: \"black\"\n  // },\n  Redacted: {\n    className: \"t--redacted\",\n    themeName: \"Redacted\",\n    themeBase: \"black\"\n  },\n  Operator: {\n    className: \"t--operator\",\n    themeName: \"Operator\",\n    themeBase: \"black\"\n  },\n  // \"Star Wars\": {\n  //   className: \"t--star-wars\",\n  //   themeName: \"Star Wars\",\n  //   themeBase: \"black\"\n  // },\n  // Tron: {\n  //   className: \"t--tron\",\n  //   themeName: \"Tron\",\n  //   themeBase: \"black\"\n  // }\n};\n\nconst ThemeContext = React.createContext(Themes);\n\nexport default ThemeContext;","import React, { useContext } from 'react';\nimport ThemeContext from '../Themes/Themes';\n\nconst AppBackground = () => {\n  const activeTheme = useContext(ThemeContext);\n\n  return (\n    <div className={`${activeTheme.className} o-app-background`}>\n      <div className={`o-app-background__overlay`}></div>\n      <img className=\"o-app-background__image\" src={'https://jorgereyesjunior.github.io/src/assets/media/images/white-triangles-background.webp'} alt=\"Full screen abstract white triangles background\"></img>\n      <video className={`o-app-background__video`} preload=\"preload\" autoPlay=\"autoplay\" loop=\"loop\" muted >\n        <source src={'https://jorgereyesjunior.github.io/src/assets/media/videos/white-triangles-background.mp4'} type=\"video/mp4\"></source>\n      </video>\n    </div>\n  )\n};\n\nexport default AppBackground;","import React, { Fragment } from 'react';\n\nfunction generateNewKey(val) {\n  let newKey; \n\n  if (val) {\n    newKey = `${val}-${new Date().getTime()}`;\n  } else {\n    newKey = `${new Date().getTime()}`;\n  }\n\n  return newKey;\n}\n\n/**\n * \n * Render redacted content.\n * @constructor\n * @param {string} redactedContent - The content to be rendered (contains [REDACTIONS]).\n * \n */\nfunction renderRedactedContent(redactedContent) {\n  // Identify a `[REDACTION]`.\n  const redaction = new RegExp(/(\\[REDACTED])/, 'g')\n\n  // Separate all identified `[REDACTION]`'s from the `redactedContent`. \n  const redactions = redactedContent.split(redaction);\n\n  function redactWord(word, i) {\n    return word.match(redaction) ? <b className={`o-redaction`} key={`redact-${generateNewKey(i)}`}>{word}</b> : word\n  }\n\n  return (\n    <Fragment>\n      {\n        redactions.map(\n          (redaction, i) => (\n            redactWord(redaction, i)\n          )\n        )\n      }\n    </Fragment>\n  );\n}\n\nexport default {\n  generateNewKey,\n  renderRedactedContent\n};","import React, { useContext } from 'react';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst Contact = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <section className=\"o-resume__contact\">\n        <div className={'c-contact'}>\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{utilities.renderRedactedContent(props['contact--redacted'].title)}</h3>\n            <div className=\"c-snapshot-panel__content\">\n              <h5>Email:</h5>{utilities.renderRedactedContent(props['contact--redacted'].email)}\n              <br></br>\n              <br></br>\n              <h5>LinkedIn:</h5>{utilities.renderRedactedContent(props['contact--redacted'].linkedin)}\n              <br></br>\n              <br></br>\n              <h5>Github:</h5>{utilities.renderRedactedContent(props['contact--redacted'].github)}\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  } else {\n    return (\n      <section className=\"o-resume__contact\">\n        <div className={'c-contact'}>\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{props.contact.title}</h3>\n            <div className=\"c-snapshot-panel__content\">\n              <h5>Email:</h5>{props.contact.email}\n              <br></br>\n              <br></br>\n              <h5>LinkedIn:</h5>{props.contact.linkedin}\n              <br></br>\n              <br></br>\n              <h5>Github:</h5>{props.contact.github}\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n};\n\nexport default Contact;","import React, { useContext } from 'react';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst Education = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <section className=\"o-resume__education\">\n        <div className=\"c-education\">\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{utilities.renderRedactedContent(props['education--redacted'].title)}</h3>\n            <div className=\"c-snapshot-panel__content\">\n              <h5>{utilities.renderRedactedContent(props['education--redacted'].school)}</h5>\n              <p>{utilities.renderRedactedContent(props['education--redacted'].location)}</p>\n              <p>{utilities.renderRedactedContent(props['education--redacted'].degree)}, {utilities.renderRedactedContent(props['education--redacted'].graduationYear)}</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  } else {\n    return (\n      <section className=\"o-resume__education\">\n        <div className=\"c-education\">\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{props.education.title}</h3>\n            <div className=\"c-snapshot-panel__content\">\n              <h5>{props.education.school}</h5>\n              <p>{props.education.location}</p>\n              <p>{props.education.degree}, {props.education.graduationYear}</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n};\n\nexport default Education;","import React, { Fragment, useContext } from 'react';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst ExperienceCard = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <section className={'c-exp-card'}>\n        <h4 className={'c-exp-card__position'}>{utilities.renderRedactedContent(props.experience.position)}</h4>\n        <p className={'c-exp-card__employer'}>{utilities.renderRedactedContent(props.experience.organization)}</p> / <p className={'c-exp-card__dates'}>{utilities.renderRedactedContent(props.experience.startDate)} - {utilities.renderRedactedContent(props.experience.endDate)}</p>\n        <p className={'c-exp-card__role'}>{utilities.renderRedactedContent(props.experience.role)}:</p>\n        <details className={'c-detail c-detail--achievements'}>\n          {\n            (props.experience.achievements).map((achievement, i) => {\n              return (\n                <Fragment key={`fragment-${utilities.generateNewKey(i)}`}>\n                  <summary key={`summary-${utilities.generateNewKey(i)}`} className={'c-detail__summary'}></summary>\n                  <p key={`p-${utilities.generateNewKey(i)}`}>- {utilities.renderRedactedContent(achievement)}</p>\n                </Fragment>\n              )\n            })\n          }\n        </details>\n      </section>\n    )\n  } else {\n    return (\n      <section className={'c-exp-card'}>\n        <h4 className={'c-exp-card__position'}>{props.experience.position}</h4>\n        <p className={'c-exp-card__employer'}>{props.experience.organization}</p> / <p className={'c-exp-card__dates'}>{props.experience.startDate} - {props.experience.endDate}</p>\n        <p className={'c-exp-card__role'}>{props.experience.role}:</p>\n        <details className={'c-detail c-detail--achievements'}>\n          {\n            (props.experience.achievements).map((achievement, i) => {\n              return (\n                <Fragment key={`fragment-${utilities.generateNewKey(i)}`}>\n                  <summary key={`summary-${utilities.generateNewKey(i)}`} className={'c-detail__summary'}></summary>\n                  <p key={`p-${utilities.generateNewKey(i)}`}>- {achievement}</p>\n                </Fragment>\n              )\n            })\n          }\n        </details>\n      </section>\n    )\n  }\n};\n\nexport default ExperienceCard;\n","import React, { useContext } from 'react';\nimport ExperienceCard from './ExperienceCard';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst Experience = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <section className=\"o-resume__experience\">\n        <div className=\"c-experience\">\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{props['experience--redacted'].title}</h3>\n            <div className=\"c-snapshot-panel__content\">\n              <ul>\n                {\n                  (props['experience--redacted'].employmentHistory).map((experience, i) => {\n                    return (\n                      <li key={utilities.generateNewKey(i)} >\n                        <ExperienceCard experience={experience} />\n                      </li>\n                    )\n                  })\n                }\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  } else {\n    return (\n      <section className=\"o-resume__experience\">\n        <div className=\"c-experience\">\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{props.experience.title}</h3>\n            <div className=\"c-snapshot-panel__content\">\n              <ul>\n                {\n                  (props.experience.employmentHistory).map((experience, i) => {\n                    return (\n                      <li key={utilities.generateNewKey(i)} >\n                        <ExperienceCard experience={experience} />\n                      </li>\n                    )\n                  })\n                }\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n};\n\nexport default Experience;","import React, { useContext } from 'react';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst Profile = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <section className=\"o-resume__profile\">\n        <div className=\"c-profile\">\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{props['profile--redacted'].title}</h3>\n            <div className=\"c-snapshot-panel__content\">{utilities.renderRedactedContent(props['profile--redacted'].content)}</div>\n          </div>\n        </div>\n      </section>\n    )\n  } else { \n    return (\n      <section className=\"o-resume__profile\">\n        <div className=\"c-profile\">\n          <div className=\"c-snapshot-panel\">\n            <h3 className=\"c-snapshot-panel__title\">{props.profile.title}</h3>\n            <p className=\"c-snapshot-panel__content\">{props.profile.content}</p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n};\n\nexport default Profile;","import React, { Fragment, useContext, useEffect, useState } from 'react';\n// import SkillsetsBars from './SkillSetsBars';\n// import SkillsetsCards from './SkillSetsCards';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst Skillsets = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  // const [isDesktop, setDesktop] = useState(window.innerWidth > 900);\n\n  // const updateMedia = () => {\n  //   setDesktop(window.innerWidth > 900);\n  // };\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", updateMedia);\n    \n  //   return () => window.removeEventListener(\"resize\", updateMedia);\n  // });\n\n  // const { primary } = props.skills;\n  // console.log(primary)\n\n  // TODO\n  //       {\n  //         isDesktop ? (\n  //           <SkillsetsCards primarySkillset={props.skills.primary} secondarySkillset={props.skills.secondary} />\n  //         ) : (\n  //           <SkillsetsBars primarySkillset={props.skills.primary} secondarySkillset={props.skills.secondary} />\n  //         )}\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <Fragment>\n          <section className=\"o-resume__skillset\">\n            <div className=\"c-skillset\">\n              <div className=\"c-snapshot-panel\">\n                <h3 className=\"c-snapshot-panel__title\">{utilities.renderRedactedContent(props['skills--redacted'].title)}</h3>\n                <div className=\"c-snapshot-panel__content\">\n                  <h5 className={'c-skillset__title--primary'}>Primary Skillset:</h5>\n                  <ul className='c-list c-list--primary-skillset'>\n                    {\n                      Object.entries(props['skills--redacted'].primary).map((primarySkill, i) => {\n                        const skillType = primarySkill[0];\n  \n                        // Insert a comma after each listed skill.\n                        const skillList = primarySkill[1].reduce((acc, val) => {\n                          acc.push(val);\n                          acc.push(\", \");\n  \n                          return acc;\n                        }, []);\n  \n                        // Replace trailing comma with a period.\n                        skillList.pop()\n                        skillList.push(\".\");\n                        \n                        // Convert Array values into string (to detect redactions).\n                        const redactedSkillList = skillList.join('');\n\n                        const redactedContent = utilities.renderRedactedContent(redactedSkillList);\n  \n                        return (\n                          <li key={utilities.generateNewKey(i)} className='s-temp-list__listing'>\n                            <p>{skillType}: {redactedContent}</p>\n                          </li>\n                        )\n                      })\n                    }\n                  </ul>\n                  <br></br>\n                  <h5 className={'c-skillset__title--secondary'}>Secondary Skillsets:</h5>\n                    <ul className='c-list c-list--secondary-skillset'>\n                      {\n                        Object.entries(props['skills--redacted'].secondary).map((secondarySkill, i) => {\n\n                          const redactedContent = utilities.renderRedactedContent(secondarySkill[1]);\n                          \n                          return (\n                            <li key={utilities.generateNewKey(i)} className='s-temp-list__listing'>\n                              <p>- {redactedContent}</p>\n                            </li>\n                          )\n                        })\n                      }\n                    </ul>\n                </div>\n              </div>\n            </div>\n          </section>\n      </Fragment>\n    );\n  } else {\n    return (\n      <Fragment>\n          <section className=\"o-resume__skillset\">\n            <div className=\"c-skillset\">\n              <div className=\"c-snapshot-panel\">\n                <h3 className=\"c-snapshot-panel__title\">{props.skills.title}</h3>\n                <div className=\"c-snapshot-panel__content\">\n                  <h5 className={'c-skillset__title--primary'}>Primary Skillset:</h5>\n                  <ul className='c-list c-list--primary-skillset'>\n                    {\n                      Object.entries(props.skills.primary).map((primarySkill, i) => {\n                        const skillType = primarySkill[0];\n  \n                        // Insert a comma after each listed skill.\n                        const skillList = primarySkill[1].reduce((acc, val) => {\n                          acc.push(val);\n                          acc.push(\", \");\n  \n                          return acc;\n                        }, []);\n  \n                        // Replace trailing comma with a period.\n                        skillList.pop()\n                        skillList.push(\".\");\n  \n                        return (\n                          <li key={utilities.generateNewKey(i)} className='s-temp-list__listing'>\n                            <p>{skillType}: {skillList}</p>\n                          </li>\n                        )\n                      })\n                    }\n                  </ul>\n                  <br></br>\n                  <h5 className={'c-skillset__title--secondary'}>Secondary Skillsets:</h5>\n                    <ul className='c-list c-list--secondary-skillset'>\n                      {\n                        Object.entries(props.skills.secondary).map((secondarySkill, i) => {\n                          return (\n                            <li key={utilities.generateNewKey(i)} className='s-temp-list__listing'>\n                              <p>- {secondarySkill[1]}</p>\n                            </li>\n                          )\n                        })\n                      }\n                    </ul>\n                </div>\n              </div>\n            </div>\n          </section>\n      </Fragment>\n    );\n  }\n  \n}\nexport default Skillsets;","import React from 'react';\nimport Contact from './Contact';\nimport Education from './Education';\nimport Experience from './Experience';\nimport Profile from './Profile';\nimport Skillsets from './Skillsets';\n\nconst Body = (props) => {\n  return (\n    <main className=\"o-resume__body\">\n      <Profile profile={props.resume.profile} profile--redacted={props.resume['profile--redacted']} />\n      <Contact contact={props.resume.contact}contact--redacted={props.resume['contact--redacted']} />\n      <Education education={props.resume.education} education--redacted={props.resume['education--redacted']} />\n      <Skillsets skills={props.resume.skills} skills--redacted={props.resume['skills--redacted']} />\n      <Experience experience={props.resume.experience} experience--redacted={props.resume['experience--redacted']} />\n    </main>\n  )\n};\n\nexport default Body;","import React, { useContext } from 'react';\nimport ThemeContext from '../../Themes/Themes';\nimport utilities from '../../../utilities/utilities';\n\nconst Bio = (props) => {\n  const activeTheme = useContext(ThemeContext);\n\n  const fullName = `${props.bio.first} ${props.bio.last} ${props.bio.suffix}`;\n\n  const redactedFullName = `${props['bio--redacted'].first} ${props['bio--redacted'].last} ${props['bio--redacted'].suffix}`;\n\n  if (activeTheme.themeName === 'Redacted' || activeTheme.themeName === 'Operator') {\n    return (\n      <section className={`o-resume__bio`}>\n        <div className={`c-resume-bio`}>\n          <h1 className={`c-resume-bio__name`}>{utilities.renderRedactedContent(redactedFullName)}</h1>\n          <hr className={`c-resume-bio__accent`}></hr>\n          <h5 className={`c-resume-bio__profession`}>{utilities.renderRedactedContent(props['bio--redacted'].profession)}</h5>\n        </div>\n      </section>\n    )\n  } else {\n    return (\n      <section className={`o-resume__bio`}>\n        <div className={`c-resume-bio`}>\n          <h1 className={`c-resume-bio__name`}>{fullName}</h1>\n          <hr className={`c-resume-bio__accent`}></hr>\n          <h5 className={`c-resume-bio__profession`}>{props.bio.profession}</h5>\n        </div>\n      </section>\n    )\n  }\n};\n\nexport default Bio;","import React from 'react';\n\nconst Headline = () => {\n  return (\n    <section className=\"o-resume__headline\">\n      <div className=\"c-headline\">\n        <div className=\"c-data-panel\">\n          <div className=\"c-snapshot-panel c-snapshot-panel--primary\">\n            <div className=\"c-snapshot-panel__content\">\n              {/* idea: give the 'hightlight' an array of values to cycle and display */}\n              <p className=\"c-data-panel__title\">I'm a <span className=\"c-headline__highlight\">[</span><span className=\"c-headline__accent\"> Software Engineer </span><span className=\"c-headline__highlight\">]</span> with a passion for unraveling and understanding complex systems</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n};\n\nexport default Headline;","import React from 'react';\n\nconst ProgressRing = (props) => {\n  const { height, width, fill, stroke, strokeWidth, targetProgress , headshot } = props;\n  // const [ progressState, setProgressState ] = useState(0);\n  const radius = (width / 2 );\n  const circumference = (radius * 2 * Math.PI);\n  const cx = (width / 2 );\n  const cy = (height / 2 );\n\n  const setProgress = function (progress) {\n    const offset = circumference - (progress / 100 * circumference);\n    const style = { strokeDashoffset: `-${offset}` };\n    return style;\n  };\n  \n  if (headshot === true ) {\n    return (\n      <svg\n        className=\"progress-ring\"\n        height={`${height}`}\n        width={`${width}`}\n      >\n        <animateTransform\n          attributeName=\"transform\"\n          attributeType=\"XML\"\n          type=\"rotate\"\n          from=\"0 0 \"\n          to=\"360 0 0\"\n          dur=\"50s\"\n          repeatCount=\"indefinite\" />\n        <circle\n          className=\"progress-ring__circle\"\n          stroke={`${stroke}`}\n          strokeWidth={`${strokeWidth}`}\n          strokeDasharray={`${circumference} ${circumference}`}\n          style={setProgress(targetProgress)}\n          fill={`${fill}`}\n          r={`${radius}`}\n          cx={`${cx}`}\n          cy={`${cy}`}\n        />\n      </svg>\n    );\n  } else {\n    return (\n      <svg\n        className=\"progress-ring\"\n        height={`${height}`}\n        width={`${width}`}\n      >\n        <circle\n          className=\"progress-ring__circle\"\n          stroke={`${stroke}`}\n          strokeWidth={`${strokeWidth}`}\n          strokeDasharray={`${circumference} ${circumference}`}\n          style={setProgress(targetProgress)}\n          fill={`${fill}`}\n          r={`${radius}`}\n          cx={`${cx}`}\n          cy={`${cy}`}\n        />\n      </svg>\n    );\n  }\n\n\n  \n};\n\nexport default ProgressRing;","import React, { useContext } from 'react';\nimport ThemeContext from '../../Themes/Themes';\nimport ProgressRing from '../Body/ProgressRing';\n\nconst Headshot = () => {\n  const activeTheme = useContext(ThemeContext);\n  console.log(\"Headshot: \", activeTheme)\n  return (\n    <section className={`${activeTheme.className} o-resume__headshot`}>\n      <div className=\"c-headshot\">\n        <figure className=\"c-headshot__figure\">\n          <ProgressRing height=\"200\" width=\"200\" stroke=\"white\" strokeWidth=\"2\" fill=\"transparent\" targetProgress=\"100\" headshot={true} />\n          <ProgressRing height=\"200\" width=\"200\" stroke=\"white\" strokeWidth=\"2\" fill=\"transparent\" targetProgress=\"75\" headshot={true} />\n          <ProgressRing height=\"200\" width=\"200\" stroke=\"#0af7f4\" strokeWidth=\"32\" fill=\"transparent\" targetProgress=\"50\" headshot={true} />\n          <ProgressRing height=\"200\" width=\"200\" stroke=\"#0ff7f4\" strokeWidth=\"2\" fill=\"transparent\" targetProgress=\"0\" headshot={true} />\n          <img className=\"c-headshot__image\" src=\"https://icon-library.net/images/headshot-icon/headshot-icon-26.jpg\" alt=\"headshot\"/>\n        </figure>\n      </div>\n    </section>\n  )\n};\n\nexport default Headshot;","import React from 'react';\nimport Bio from './Bio';\nimport Headline from './Headline';\nimport Headshot from './Headshot';\n\nconst Header = (props) => {\n  if (props.omitHeadshotAndHeadline) {\n    return (\n      <header className={`o-resume__header`}>\n        <div className={`c-resume__header`}>\n          <Bio bio={props.resume.bio} bio--redacted={props.resume['bio--redacted']}/>\n        </div>\n      </header>\n    )\n  } else if (props.includeHeadshotOnly) {\n    return (\n      <header className={`o-resume__header--with-headshot`}>\n        <div className={`c-resume__header--with-headshot`}>\n          <Headshot />\n          <Bio bio={props.resume.bio} />\n        </div>\n      </header>\n    )\n  } else if (props.includeHeadshotAndHeadline) {\n    return (\n      <header className={`o-resume__header--with-headshot-and-headline`}>\n        <div className={`c-resume__header--with-headshot-and-headline`}>\n        <Headshot />\n        <Bio bio={props.resume.bio} />\n        <Headline />\n      </div>\n      </header>\n    )\n  } else {\n    return (\n      <header className={`o-resume__header`}>\n        <div className={`c-resume__header`}>\n          <Bio bio={props.resume.bio} />\n        </div>\n      </header>\n    )\n  }\n};\n\nexport default Header;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Body from './Body/Body';\nimport Header from './Header/Header';\n\nconst Resume = () => {\n  const [data, setData] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [delayedUI, setDelayedUI] = useState(true);\n\n  // Simulate async data fetch.\n  async function fetchData() {\n    setIsError(false);\n    setIsLoading(true);\n\n    try {\n        const response = await axios.get('data/db.json');\n\n        setData(response.data);\n    } catch (error) {\n      setIsError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  /**\n   * \n   * Effect to async fetch data: includes a setTimeout to delay loading UI and avoid rapid UI flash when fetching resume data.\n   * \n  **/\n  useEffect(() => {\n    let useEffectAborted = false;\n    let delay = 250;\n    \n    const timeout = setTimeout(() => setDelayedUI(false), delay);\n\n    if (!useEffectAborted) {\n      fetchData();\n    };\n\n    return (\n      () => {\n        clearTimeout(timeout);\n        useEffectAborted = true;\n      }\n    )\n  }, []);\n\n  // Markup\n  if (delayedUI) {\n    return (\n      <div className={`o-resume`}>\n        <h3>Loading Resume...</h3>\n      </div>\n    )\n  } else if (!delayedUI && data) {\n    return (\n      <div className={`o-resume`}>\n        <Header\n          resume={data.resume}\n          /* if `omitHeadshotAndHeadline` is true, `includeHeadshotOnly` and `includeHeadshotAndHeadline` will not render */\n          omitHeadshotAndHeadline={true}\n          /* if `omitHeadshotAndHeadline` is true, `includeHeadshotOnly` will not render */\n          includeHeadshotOnly={false}\n          /* if `omitHeadshotAndHeadline` or `includeHeadshotOnly` are true, includeHeadshotAndHeadline` will not render */\n          includeHeadshotAndHeadline={false}\n        />\n        <Body resume={data.resume} />\n      </div>\n    )\n  } else if (!delayedUI && isLoading) {\n    return (\n      <div className={`o-resume`}>\n        <h3>Fetching resume data...</h3>\n      </div>\n    )\n  } else if (!delayedUI && isError) {\n    return (\n      <div className={`o-resume`}>\n        <h3>An error has occurred, unable to fetch resume data...</h3>\n      </div>\n    )\n  }\n};\n\nexport default Resume;","import React from 'react';\nimport Resume from '../Resume/Resume';\n\nconst Layout = () => {  \n  return (\n    <div className={`o-layout`}>\n      <Resume />\n    </div>\n  )\n};\n\nexport default Layout;","import React, { useContext } from 'react';\nimport Layout from '../Layout/Layout';\nimport ThemeContext from '../Themes/Themes';\n\nconst AppLayout = () => {\n  const activeTheme = useContext(ThemeContext);\n  \n  return (\n    <div className={`${activeTheme.className} o-app-layout`}>\n      <Layout />\n    </div>\n  )\n};\n\nexport default AppLayout;","import React, { useContext } from 'react';\nimport AppBackground from './AppBackground';\nimport AppLayout from './AppLayout';\nimport ThemeContext from '../Themes/Themes';\n\nconst App = () => {\n  const activeTheme = useContext(ThemeContext);\n\n  return (\n    <div className={`${activeTheme.className} o-app`}>\n      <AppBackground />\n      <AppLayout />\n    </div>\n  )\n};\n\nexport default App;","import React, { useState, useContext } from 'react';\nimport ThemeContext from './Themes';\nimport utilities from '../../utilities/utilities';\n\nconst ThemeSelector = (props) => {\n  const allThemes = useContext(ThemeContext);\n  const [activeTheme, setActiveTheme] = useState(applyDefaultTheme());\n\n  function applyDefaultTheme() {\n    for(let i = 0; i < Object.keys(allThemes).length; i++) {\n      let registeredTheme = Object.entries(allThemes)[i];\n\n      if(registeredTheme[1].themeName === 'Default') {\n        return registeredTheme[1]\n      }\n    } \n  }\n\n  function applyNewTheme(selectedName) {\n    const selectedTheme = selectedName.replace(/\\s+/g, '');\n\n    for(let i = 0; i < Object.keys(allThemes).length; i++) {\n      let registeredTheme = Object.entries(allThemes)[i];\n\n      if(registeredTheme[1].themeName.replace(/\\s+/g, '') === selectedTheme) {\n        return registeredTheme[1];\n      }\n    } \n  }\n\n  function handleThemeChange(e) {\n    const newTheme = applyNewTheme(e.target.value);\n    \n    setActiveTheme(newTheme);\n  }\n\n  return (\n    <ThemeContext.Provider value={activeTheme}\n    >\n      <div className={`o-theme-wrapper`}>\n        <form className={`c-theme-wrapper`}>\n          <h4 className={`c-theme-wrapper__title`}>Available Themes:</h4>\n          <div className={`o-theme`}>\n            {\n              Object.entries(allThemes).map((theme) => {\n                return (\n                  <div className={`o-theme__option`} key={`${theme[0]}-${utilities.generateNewKey()}`}>\n                    <label className={`o-theme__label c-label c-lable--theme`}>\n                      <input className={`o-theme__radio c-radio c-radio--theme`} type=\"radio\" value={theme[0]} checked={activeTheme.themeName === `${theme[0]}`} onChange={handleThemeChange} />\n                      {theme[0]}\n                    </label>\n                  </div>\n                )\n              })\n            }\n          </div>\n        </form>\n      </div>\n      { props.children }\n    </ThemeContext.Provider>\n  )\n};\n\nexport default ThemeSelector;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"regenerator-runtime/runtime\";\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n// import { createStore, applyMiddleware } from 'redux';\n// import createSagaMiddleware from 'redux-saga';\nimport PropTypes from 'prop-types';\n// import RootReducer from './app/reducers/all';\n// import RootSaga from './app/sagas';\nimport App from './app/components/App/App';\nimport ThemeWrapper from './app/components/Themes/ThemeWrapper';\nimport * as serviceWorker from './serviceWorker';\nimport './app/styles/imports.css';\n\n// const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(() => {});\n// const store = createStore(\n//   RootReducer,\n//   applyMiddleware(sagaMiddleware)\n// );\n\n// sagaMiddleware.run(RootSaga);\n\nProvider.propTypes = {\n  store: PropTypes.object.isRequired\n};\n\n// store.subscribe(() => {\n//   // let newState = store.getState();\n//   // console.log(\"New `store` state: \", newState);\n// });\n\nrender(\n  <Provider store={store}>\n    <ThemeWrapper>\n      <App />\n    </ThemeWrapper>\n  </Provider>,\n  document.getElementById('o-app-root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}